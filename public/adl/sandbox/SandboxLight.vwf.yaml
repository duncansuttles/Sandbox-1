# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.
---
extends: http://vwf.example.com/light.vwf
methods:
properties:
  type: 'Light'
  EditorData:
    brightness:
      displayname: Intensity
      property: intensity
      type: slider
      min: 0
      max: 5
      step: .01
    distance:
      displayname: Distance
      property: distance
      type: slider
      min: 0
      max: 500
      step: 1  
    color:
      displayname: "Diffuse Color"
      property: color
      type: color
    spotAngle:
      displayname: "Spot Angle"
      property: "spotCosCutOff"  
      type: slider
      min: 0
      max: 5
      step: .01
    ZZZLightType:
      displayname: "Light Type"
      property: lightType
      type: choice
      labels: 
        - Spot
        - Point
        - Directional
      values:
        - spot
        - point
        - directional       
scripts:
-  |
    this.initialize = function()
    {
          
          if(this.id == 'SandboxLight-vwf') return;
          this.prerendercallback = this.placeNameTag.bind(this);
          _dView.bind('glyphRender',this.prerendercallback);
          this.createNameTag();
          
        
    }
    this.createNameTag = function()
    {
    
      var newdiv = document.createElement('img');
      
      $(newdiv).addClass('glyph');
      newdiv.style.position = 'absolute';
      newdiv.id = "Player " + this.name + 'icon';
      //newdiv.innerHTML = "" + this.name;
      $(newdiv).attr('src','../vwf/view/editorview/images/icons/light_icon.png');
      newdiv.style.left = '0px';
      newdiv.style.top = '0px';
      
      $('#glyphOverlay').append(newdiv);
      $(newdiv).disableSelection();
         $(newdiv).mousedown(function(e){$('#index-vwf').focus(); if(_Editor.GetSelectMode() == "None" || e.which != 1) $('#index-vwf').trigger(e)});
      $(newdiv).mouseup(function(e){$('#index-vwf').focus();$('#index-vwf').trigger(e)});
      $(newdiv).mousemove(function(e){$('#index-vwf').trigger(e)});
      $(newdiv).click(function(e){$('#index-vwf').focus(); if(_Editor.GetSelectMode() != "None") _Editor.SelectObjectPublic(this.id)}.bind(this));
      this.nametag = newdiv;
                 
    }
    this.deinitialize = function()
    {
       _dView.unbind('glyphRender',this.prerendercallback);
       $(this.nametag).remove();
    }
    this.placeNameTag = function(e,viewprojection, wh, ww)
    {
      
     
      var div = this.nametag;
     var trans = (new THREE.Vector3()).setFromMatrixPosition(_Editor.findviewnode(this.id).matrixWorld);
      var pos = [trans.x,trans.y,trans.z];
      pos = [pos[0],pos[1],pos[2],1];
         
      
      
      var screen = MATH.mulMat4Vec4(viewprojection,pos);
      screen[0] /= screen[3];
      screen[1] /= screen[3];
     
      screen[0] /= 2;
      screen[1] /= 2;
      screen[2] /= 2;
      screen[0] += .5;
      screen[1] += .5;
      
  
      screen[0] *= ww;
      screen[1] *= wh;
      
     
      screen[1] = wh - screen[1];

      div.style.top = (screen[1])  +  'px';
      div.style.left = (screen[0]  - div.offsetWidth/2)  +'px';
     
     
      if((screen[0] < 0 || screen[0] > ww || screen[1] < 0 || screen[1] > wh))
      {
            if(div.style.display != 'none')
                div.style.display = 'none';
      }
      else
      {
          if((screen[2] > 10 || screen[2] < 0) && div.style.display != 'none')
             div.style.display = 'none';
          if(screen[2] < 10 && screen[2] > 0 && div.style.display == 'none')
             div.style.display = 'block';
      }
         
      
         
    }