# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/navscene.vwf
properties:
  clients: 
  DisplayName:
  glyphURL: '../vwf/view/editorview/images/icons/scene.png'  
  simTime: 0
  placemarks:
    Origin: [0, 0, 0]
  navmode: none     
  sunColor: 
    value: [1, 1, 1]
    set: |
            if(!this.sun) return;
            this.sun.color.r = value[0];
            this.sun.color.g = value[1];
            this.sun.color.b = value[2];
  sunDirection: 
    value: [.5 , .5 , 1 ]
    set: |
            if(!this.sun) return;
            
            var x = value[2] * Math.sin(value[0])* Math.cos(value[1]);
            var y = value[2] * Math.sin(value[0])* Math.sin(value[1]);
            var z = value[2] * Math.cos(value[0]);
            
            this.sun.position.x = x;
            this.sun.position.y = y;
            this.sun.position.z = z;      
            this.sun.position.normalize();
            this.sun.position.multiplyScalar(100);
            this.sun.updateMatrixWorld(true);
  sunIntensity: 
    value: .8
    set: |
            if(!this.sun) return;
            this.sun.intensity = value;   
  shadowDarkness:
    value: .5
    set: |
            if(!this.sun) return;
            this.sun.shadowDarkness = value;    
  ambientColor: 
    value: [.35, .35 , .35]
  fogColor: [1, 1, 1]
  fogNear: 100
  fogFar: 1000
  fogType: 0
  fogDensity: .005
  fogVFalloff: 1.3
  fogVFalloffStart: 0
  skyColorBlend: 0  
  skyFogBlend: 0  
  skyApexColor: [ 0 , .5 , 1.0 ]
  skyHorizonColor: [ 0 , .5 , 1.0 ]
  ___physics_gravity: [ 0, 0, -9.8]
  ___physics_accuracy: 10
  ___physics_active: true
  vAtmosphereDensity: .0005
  playMode: "paused"
  octreeObjects: 5
  octreeDepth: 16
  octreeExtents: 640
  materialDef:
    set: |  
           this.materialDef = value;
           
           return this.setTexture(value);
    get: |  
           return this.getTexture();
  skyTexture:
    set: |
            
            this.skyTexture = value;
            if(!this.sun) return;
            this.CreateSky(value);
            
    get: |
             return this.skyTexture
    value: white             
  owner:
  type: scene
  clientAPI:
    get : |
           
           if(this.___clientAPI) return this.___clientAPI;
           this.___clientAPI = {};
           this.___clientAPI.getUserNameForConnectionID = function(id)
           {
           	   if(!this.clients || !this.clients[id]) return null;
           	   		return this.clients[id].name;
           }.bind(this);
           this.___clientAPI.getConnectionIDForUserName = function(name)
           {
           	   if(!this.clients) return null;
           	   for(var i in this.clients.internal_val)
           	   {
           	   		if(this.clients[i].name == name)
           	   			return i;
           	   }
           	   return null;
           }.bind(this);
           this.___clientAPI.getAvatarForUserName = function(name)
           {
           	  return this.findNodeByID('character-vwf-' + name);
           }.bind(this);
           this.___clientAPI.focus = function(cid,nodeID)
           {
              //did the user enter a whole node, not a node ID?
              if(nodeID && nodeID.id)
                nodeID = nodeID.id;
              if(this.clients[cid])
              {
                 this.clients[cid].focusID = nodeID;
              }  
           }.bind(this);
           this.___clientAPI.getCameraIDForClient = function(id)
           {
             if(!this.clients || !this.clients[id]) return null;
                  return this.clients[id].cameraID;
           }.bind(this);
           this.___clientAPI.getCameraForClient = function(id)
           {
             if(!this.clients || !this.clients[id]) return null;
                  return this.findNodeByID(this.clients[id].cameraID);
           }.bind(this);
           return this.___clientAPI;
  commsAPI:
    get: |
          var self = this;
          if(this.___commsAPI) return this.___commsAPI;
          this.___commsAPI = {};
          this.___commsAPI.PM = function(from_client_id, to_client_id)
          {
            if(vwf.moniker() == from_client_id)
            {
               if(self.clients[to_client_id])
               {
                setupPmWindow(to_client_id)
               }
            }
          }
          this.___commsAPI.Chat = function()
          {
              $('#ChatWindow').dialog('open');
          }
          this.___commsAPI.VideoCall = function(from_client_id, to_client_id)
          {
            if(vwf.moniker() == from_client_id)
            {
               if(self.clients[to_client_id])
               {
                 vwf.callMethod(vwf.application(),'rtcVideoCall',{target:to_client_id});
               }
            }
          }
          this.___commsAPI.VoiceCall = function(from_client_id, to_client_id)
          {
            if(vwf.moniker() == from_client_id)
            {
               if(self.clients[to_client_id])
               {
                 vwf.callMethod(vwf.application(),'rtcCall',{target:to_client_id});
               }
            }
          } 
          return this.___commsAPI;         
  EditorData:
    fog:
      displayname: 'Fog'
      type: 'sectionTitle'
    fogNear:
      displayname: Fog Near
      property: fogNear
      type: slider
      min: 0
      max: 2000
      step: 1
    fogFar:
      displayname: Fog Far
      property: fogFar
      type: slider
      min: 0
      max: 2000
      step: 1
    fogDensity:
      displayname: Fog Density
      property: fogDensity
      type: slider
      min: 0
      max: .1
      step: .001
    fogvFAlloff:
      displayname: Fog Falloff
      property: fogVFalloff
      type: slider
      min: .1
      max: 10
      step: .001 
    fogvFAlloffStart:
      displayname: Fog Falloff Start
      property: fogVFalloffStart
      type: slider
      min: -100
      max: 100
      step: .1  
    sunIntensity:
      displayname: Sun Intensity
      property: sunIntensity
      type: slider
      min: 0
      max: 5
      step: .1      
    fogType:
      displayname: Fog Type
      property: fogType
      type: choice
      labels:         
        - None
        - Linear
        - Quad
      values:
        - null
        - linear
        - exp  
    fogColorR:
      displayname: Fog Color
      property: fogColor
      type: color
    sun:
      displayname: 'Sun'
      type: 'sectionTitle'  
    sunambientColor:
      displayname: ambient
      property: ambientColor
      type: color     
    sunColor:
      displayname: Sun Color
      property: sunColor
      type: color
    sunRot:
      displayname: Sun Direction
      property: sunDirection
      type: vector
      step: .05
    sunShadowDarkness:
      displayname: Sun Shadow Density
      property: shadowDarkness
      type: slider
      step: .05
      min: 0
      max: 2  
    sky:
      displayname: 'Sky'
      type: 'sectionTitle'  
    skyTexture:
      displayname: skyTexture
      property: skyTexture
      type: choice
      labels: 
        - CloudyNoon
        - Morning
        - Evening
        - Morning2
        - Storm
        - ThunderStorm
        - Night1
        - Night2
        - Bright
        - White
        - Black
      values:
        - cloudy_noon
        - early_morning
        - evening  
        - morning  
        - stormy
        - StormClouds   
        - night1
        - night2
        - bright
        - white
        - black
    skyColorBlend:  
      displayname: Sky Color Blend
      property: skyColorBlend
      type: slider
      min: 0
      max: 1
      step: .01  
    skyFogBlend:
      displayname: Sky Fog Amount
      property: skyFogBlend
      type: slider
      min: 0
      max: 1
      step: .01  
    skyAtmosphereDensity: 
      displayname: Atmosphere Density
      property: skyAtmosphereDensity
      type: slider
      min: 0
      max: 1
      step: .01     
    skyApexColor:
      displayname: Sky Apex Color
      property: skyApexColor
      type: color
    skyHorizonColor: 
      displayname: Sky Horizon Color
      property: skyHorizonColor
      type: color
    zOctree:
      displayname: 'Octree Accelerator'
      type: 'sectionTitle'
    zOctreeDepth:
      displayname: 'Octree Max Depth'
      property: octreeDepth
      type: slider
      min: 3
      max: 24
      step: 1
    zOctreeExtents:
      displayname: 'Octree Size (m)'
      property: octreeExtents
      type: slider
      min: 10
      max: 10000
      step: 10
    zOctreeObjects:
      displayname: 'Max Objects per Octree Cell'
      property: octreeObjects
      type: slider
      min: 3
      max: 20
      step: 1         
events:
  disconnected:
  avatarCreated:
  clientConnected:
  clientDisconnected:
  pointerOver:
  pointerOut:
  pointerClick:
  pointerDown:
  pointerUp:
  pointerMove:
  keyDown:
  keyUp:
  clientCameraChanged:
methods:  
  AmLocal:
  newplayer:
  deleteplayer:
  initialize:
  receiveChat:
  CreatePlane:
  PM:
  latencyTest:
  getSkyMat:
  cameraBroadcastStart:
  broadcastCameraPosition:
  tick:
  getBroadcasting:
  cameraBroadcastEnd:
  playSound:
  setMusic:
  ___physics_world_reset:
  activteOculusBridge:
  setClientCamera:
  getGroundPlane:
scripts:
- |
    this.initialize = function(){
 
       
       
       this.OwnedPrims = [];
      

      
       var ground = new THREE.Mesh(new THREE.PlaneGeometry(256,256,10,10), new THREE.MeshPhongMaterial());
       ground.receiveShadow = _SettingsManager.getKey('shadows');
       ground.PickPriority = -1;
       
       
       var grassTex = THREE.ImageUtils.loadTexture('textures/gridnew.png');
       
     
       ground.material.map = grassTex;
        grassTex.wrapS = THREE.RepeatWrapping;
        grassTex.wrapT = THREE.RepeatWrapping;
        grassTex.repeat.x = 64;
        grassTex.repeat.y = 64;
       grassTex.anisotropy  = 0;
       this.groundplane = ground;
       
       
       findscene().add(ground);
       
       if(this.materialDef)
       this.setTexture(this.materialDef);
       var l = new THREE.DirectionalLight();
       this.sun = l;
       this.sun.name = 'Sun';
       this.sun.castShadow = _SettingsManager.getKey('shadows');
       this.sun.shadowCameraNear = 1;
       this.sun.shadowCameraFar = 100;
       //this.sun.shadowCameraVisible = true;
       this.sun.shadowCameraBottom = -10;
       this.sun.shadowCameraLeft = -10;
       this.sun.shadowMapWidth = 1024;
       this.sun.shadowMapHeight = 1024;
       
       this.sun.shadowCameraTop = 10;
       this.sun.shadowCameraRight = 10;
       findscene().add(l);
       rebuildAllMaterials();
       
       this.sun.position.x = this.sunDirection[0];
       this.sun.position.y = this.sunDirection[1];
       this.sun.position.z = this.sunDirection[2];
       this.sun.position.normalize();
       this.sun.position.multiplyScalar(100);
       this.sun.intensity = this.sunIntensity;
       this.sun.shadowBias = -.005;
       this.sun.shadowDarkness = this.shadowDarkness;
       window._dGround = this.groundplane;
       this.groundplane.name = 'GroundPlane';
       //this.groundplane.visible = false;
       window._dSun = this.sun;
       
       this.sun.updateMatrixWorld(true);
       this.CreateSky(vwf.getProperty(this.id,'skyTexture') || 'white');
      
         this.postprerendercallback = this.postprerender.bind(this);
        _dView.bind('postprerender', this.postprerendercallback);

         
    }
    this.tick = function()
    {
        if(this.receivingCameraBroadcast && this.cameramode != 'None')
            this.receivingCameraBroadcast = false;
        this.simTime = this.simTime +1;
    }
        this.getSkyMat = function()
    {
    
        return this.skycube.material;
    
    }
    this.latencyTest = function(e)
    {
        if(this.moniker == this.client)
        {
            var time = new Date(e.time);
            var thistime = (new Date()) - time;
            _Notifier.alert("The round trip time to the server was: " + thistime +"ms");
        }
    }
    this.getGroundPlane = function()
    {
      return this.groundplane;
    }
    //the system is notifiying us that it has become disconnected from the server
    this.disconnected = function()
    {
        
        alert('This client has been disconnected from server. The page must be reloaded.');
        var user = _UserManager.GetCurrentUserID();
        
        try{vwf.deleteNode(user)} catch(e){};
        document[document.PlayerNumber +'link'] = null;
        document.PlayerNumber = null;
        _UserManager.currentUsername = null;
        window.onbeforeunload = null;
        $(window).unbind();
        window.location.reload();
    }
    //a new client has joined the simulation
    this.avatarCreated = function(id)
    {
    
    
    }
    //a new client has joined the simulation
    this.clientConnected = function(id,name,UID)
    {
    
    	if(!this.clients)
    	{
    		this.clients = {}
    	}
    	if(!this.clients[id])
    		this.clients.defineProperty(id,{cid:id,name:name,UID:UID,cameraID:null,focusID:vwf.application()});
      this.___physics_world_reset();  //reset the physics world when a client joins;
    }
    // a client other than this one has left
    this.clientDisconnected = function(id,name,UID)
    {
    	if(this.clients)
    	{
    		delete this.clients.internal_val[id];
    		this.clients = this.clients.internal_val;		
    	}
    }
    this.setClientCamera = function(id,cameraID)
    {
        if(!this.clients)
        {
          this.clients = {}
        }
        if(this.clients[id])
        {
          this.clients[id].cameraID = cameraID;
          this.clientCameraChanged(id,cameraID);
        }
    }
    this.CreatePlane = function(width,height)
    {
        
        var hw = width/2;
        var hh = height/2;
        
        var planemesh = new MATH.Mesh();
       
        var planeobj = new MATH.Object();
        planeobj.PickPriority = 0;
        planeobj.setMesh(planemesh);
        planemesh.setPositions([-hw,-hh,-.001, hw,-hh,-.001, hw,hh,-.001, -hw,hh,-.001]);
        planemesh.setTangents([-hw,-hh,0, hw,-hh,0, hw,hh,0, -hw,hh,0]);
        planemesh.setFaces([0,1,2,2,3,0]);
        planemesh.setUV([0,0,250/4 ,0,250/4,250/4,0,250/4]);
        findscene().addChild(planeobj);
        planeobj.InvisibleToCPUPick = false;
        return planeobj;
    }
    this.CreateSky = function(sky_name)
    {
     
        ////console.log('set sky ' + sky_name);
       
       //var sky_name = 'cloudy_noon';
       var urls = [];

        
        urls.push('skys/'+sky_name+'_FR.jpg');
        urls.push('skys/'+sky_name+'_BK.jpg');
        urls.push('skys/'+sky_name+'_RT.jpg');
        urls.push('skys/'+sky_name+'_LF.jpg');
        urls.push('skys/'+sky_name+'_UP.jpg');
        urls.push('skys/'+sky_name+'_DN.jpg');
       
       
        
       var loaded = function(){
            this.skymaterial.uniforms.texture.value.image = skyCubeTexture.image;
            this.skymaterial.uniforms.texture.value.needsUpdate = true;
            this.skymaterial.uniforms.texture.value.wrapS = this.skymaterial.uniforms.texture.value.wrapT = THREE.RepeatWrapping;
       }.bind(this);
            var skyCubeTexture = THREE.ImageUtils.loadTextureCube(urls,undefined,loaded);
           // skyCubeTexture.format = THREE.RGBFormat;
            skyCubeTexture.generateMipmaps = true;
            skyCubeTexture.minFilter = THREE.LinearFilter;
            skyCubeTexture.magFilter = THREE.LinearFilter;
            skyCubeTexture.wrapS = THREE.ClampToEdgeWrapping;
            skyCubeTexture.wrapT = THREE.ClampToEdgeWrapping;

            
       if(!this.skymaterial)
       {
       
            
                this.skymaterial = new THREE.ShaderMaterial( {
                    uniforms:       THREE.ShaderLib.sky.uniforms,
                    attributes:     THREE.ShaderLib.sky.attributes,
                    vertexShader:   THREE.ShaderLib.sky.vertexShader,
                    fragmentShader: THREE.ShaderLib.sky.fragmentShader
                });
            this.skymaterial.uniforms.texture.value = skyCubeTexture;    

            this.skymaterial.depthWrite = false;
            this.skymaterial.depthTest= false;
            this.skymaterial.fog= true;
            this.skymaterial.lights= true;
            this.skymaterial.transparent = false;
            this.skymaterial.uniforms.texture.value = skyCubeTexture;    
            
       }
       
       
       this.skymaterial.side = 1;
       
      
       if(!this.skycube)
       {
           this.skycube = new THREE.Mesh(new THREE.SphereGeometry(1,10,20), this.skymaterial);
           this.skycube.name = "SkyCube";
           this.skycube.renderDepth = -Infinity;
           this.skycube.InvisibleToCPUPick = true;
           this.skycube.PickPriority = -1;
           this.skycube.depthWrite = false;
           this.skycube.depthCheck = false;
           this.skycube.castShadow = false;
           this.skycube.receiveShadow = false;
           findscene().add(this.skycube);
           
           window._dSky = this.skycube;
          
       }
        
    }
     function findscene()
      {
             return vwf.views[0].state.scenes["index-vwf"].threeScene;
      }
      function findcamera()
      {
             return _Editor.findcamera();
      }
     
     
      
    
    this.receiveChat = function(e)
    {
        if(window.ChatMessageReceived)
          ChatMessageReceived(e);
    }
    this.PM = function(e)
    {
        if(window.PMReceived)
        PMReceived(e);
    }
    function nodeExists(tempid)
    {
        for(var i in vwf.models.object.objects)
            if (vwf.models.object.objects[i].properties.tempid == tempid) return true;
        
        return false;
    }
    
    function findviewnode(id)
    {
        for(var i =0; i<vwf.views.length;i++)
        {
            if(vwf.views[i].state.nodes[id].threeObject) return vwf.views[i].state.nodes[id].threeObject;
        }
        return null;
    }
    
    this.newplayer = function(e)
    {
        
       
        
    }
    
    this.getTexture = function()
    {
            if(this.materialDef) return this.materialDef;    
           
            return {
                    shininess:15,
                    alpha:1,
                    ambient:{r:.8,g:.8,b:.8},
                    color:{r:1,g:1,b:1,a:1},
                    emit:{r:0,g:0,b:0},
                    reflect:0.8,
                    shadeless:false,
                    shadow:_SettingsManager.getKey('shadows'),
                    specularColor:{r:0.5773502691896258,g:0.5773502691896258,b:0.5773502691896258},
                    specularLevel:1,
                    layers:[
                      {  alpha: 1,
                        blendMode: 0,
                        mapInput: 0,
                        mapTo: 1,
                        offsetx: .11,
                        offsety: .11,
                        rot: 0,
                        scalex: 250/9,
                        scaley: 250/9,
                        src: "textures/grid2.gif"}
                    ]
            }            
    
    }
    this.setTexture = function(value)
    {
             if(this.groundplane)
              _MaterialCache.setMaterial(this.groundplane,value)       
    }
    
    this.deinitialize = function()
    {
       _dView.unbind('prerender',this.prerendercallback);
       _dView.unbind('postprerender',this.postprerendercallback);
       $(this.nametag).remove();
    }
    
    this.tempmatrix = (new THREE.Matrix4());
    this.lightvec = new THREE.Vector3(0,0,-3);
    this.postprerender = function(e,viewprojection, wh, ww)
    {
     
     if( this.skycube && this.skycube.geometry.boundingSphere) 
      this.skycube.geometry.boundingSphere.radius = Infinity;
      //focus the shadow camera projection matrix around the camera tha views the scene.
      if(this.sun && this.sun.shadowCamera)
      {
       
      
       this.lightvec.x = 0;
       this.lightvec.y = 0;
       this.lightvec.z = -3;
       var campos = findcamera().localToWorld(this.lightvec);
       
       this.sun.shadowCamera.updateMatrixWorld(true)
        var lm = this.sun.shadowCamera.matrixWorld.clone();
        lm = this.tempmatrix.getInverse(lm);
        var camposLS = campos.applyMatrix4(lm);
        
       
        
        this.sun.shadowCamera.projectionMatrix.makeOrthographic(camposLS.x - 15,camposLS.x + 15,camposLS.y - 15,camposLS.y+15,-camposLS.z - 15 ,-camposLS.z + 15 );
        }
    }    


    this.pointerOver = function(){return false;}
    this.pointerOut= function(){return false;}
    this.pointerClick= function(){return false;}
    this.pointerDown= function(){return false;}
    this.pointerUp= function(){return false;}
    this.pointerMove= function(){return false;}

    //this really belongs in the view 
    this.activteOculusBridge = function()
    {
        this.oculusActive = true;
    }
        
    
    
 
 
   

   
