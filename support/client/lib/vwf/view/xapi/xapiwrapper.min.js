function toBase64(e) {
    if (CryptoJS && CryptoJS.enc.Base64) return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Latin1.parse(e));
    else return Base64.encode(e)
}

function toSHA1(e) {
    if (CryptoJS && CryptoJS.SHA1) return CryptoJS.SHA1(e).toString();
    else return Crypto.util.bytesToHex(Crypto.SHA1(e, {
        asBytes: true
    }))
}
var CryptoJS = CryptoJS || function(e, t) {
        var n = {};
        var r = n.lib = {};
        var i = r.Base = function() {
            function e() {}
            return {
                extend: function(t) {
                    e.prototype = this;
                    var n = new e;
                    if (t) {
                        n.mixIn(t)
                    }
                    if (!n.hasOwnProperty("init")) {
                        n.init = function() {
                            n.$super.init.apply(this, arguments)
                        }
                    }
                    n.init.prototype = n;
                    n.$super = this;
                    return n
                },
                create: function() {
                    var e = this.extend();
                    e.init.apply(e, arguments);
                    return e
                },
                init: function() {},
                mixIn: function(e) {
                    for (var t in e) {
                        if (e.hasOwnProperty(t)) {
                            this[t] = e[t]
                        }
                    }
                    if (e.hasOwnProperty("toString")) {
                        this.toString = e.toString
                    }
                },
                clone: function() {
                    return this.init.prototype.extend(this)
                }
            }
        }();
        var s = r.WordArray = i.extend({
            init: function(e, n) {
                e = this.words = e || [];
                if (n != t) {
                    this.sigBytes = n
                } else {
                    this.sigBytes = e.length * 4
                }
            },
            toString: function(e) {
                return (e || u).stringify(this)
            },
            concat: function(e) {
                var t = this.words;
                var n = e.words;
                var r = this.sigBytes;
                var i = e.sigBytes;
                this.clamp();
                if (r % 4) {
                    for (var s = 0; s < i; s++) {
                        var o = n[s >>> 2] >>> 24 - s % 4 * 8 & 255;
                        t[r + s >>> 2] |= o << 24 - (r + s) % 4 * 8
                    }
                } else if (n.length > 65535) {
                    for (var s = 0; s < i; s += 4) {
                        t[r + s >>> 2] = n[s >>> 2]
                    }
                } else {
                    t.push.apply(t, n)
                }
                this.sigBytes += i;
                return this
            },
            clamp: function() {
                var t = this.words;
                var n = this.sigBytes;
                t[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;
                t.length = e.ceil(n / 4)
            },
            clone: function() {
                var e = i.clone.call(this);
                e.words = this.words.slice(0);
                return e
            },
            random: function(t) {
                var n = [];
                for (var r = 0; r < t; r += 4) {
                    n.push(e.random() * 4294967296 | 0)
                }
                return new s.init(n, t)
            }
        });
        var o = n.enc = {};
        var u = o.Hex = {
            stringify: function(e) {
                var t = e.words;
                var n = e.sigBytes;
                var r = [];
                for (var i = 0; i < n; i++) {
                    var s = t[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                    r.push((s >>> 4).toString(16));
                    r.push((s & 15).toString(16))
                }
                return r.join("")
            },
            parse: function(e) {
                var t = e.length;
                var n = [];
                for (var r = 0; r < t; r += 2) {
                    n[r >>> 3] |= parseInt(e.substr(r, 2), 16) << 24 - r % 8 * 4
                }
                return new s.init(n, t / 2)
            }
        };
        var a = o.Latin1 = {
            stringify: function(e) {
                var t = e.words;
                var n = e.sigBytes;
                var r = [];
                for (var i = 0; i < n; i++) {
                    var s = t[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                    r.push(String.fromCharCode(s))
                }
                return r.join("")
            },
            parse: function(e) {
                var t = e.length;
                var n = [];
                for (var r = 0; r < t; r++) {
                    n[r >>> 2] |= (e.charCodeAt(r) & 255) << 24 - r % 4 * 8
                }
                return new s.init(n, t)
            }
        };
        var f = o.Utf8 = {
            stringify: function(e) {
                try {
                    return decodeURIComponent(escape(a.stringify(e)))
                } catch (t) {
                    throw new Error("Malformed UTF-8 data")
                }
            },
            parse: function(e) {
                return a.parse(unescape(encodeURIComponent(e)))
            }
        };
        var l = o.Base64 = {
            stringify: function(e) {
                var t = e.words;
                var n = e.sigBytes;
                var r = this._map;
                e.clamp();
                var i = [];
                for (var s = 0; s < n; s += 3) {
                    var o = t[s >>> 2] >>> 24 - s % 4 * 8 & 255;
                    var u = t[s + 1 >>> 2] >>> 24 - (s + 1) % 4 * 8 & 255;
                    var a = t[s + 2 >>> 2] >>> 24 - (s + 2) % 4 * 8 & 255;
                    var f = o << 16 | u << 8 | a;
                    for (var l = 0; l < 4 && s + l * .75 < n; l++) {
                        i.push(r.charAt(f >>> 6 * (3 - l) & 63))
                    }
                }
                var c = r.charAt(64);
                if (c) {
                    while (i.length % 4) {
                        i.push(c)
                    }
                }
                return i.join("")
            },
            parse: function(e) {
                var t = e.length;
                var n = this._map;
                var r = n.charAt(64);
                if (r) {
                    var i = e.indexOf(r);
                    if (i != -1) {
                        t = i
                    }
                }
                var o = [];
                var u = 0;
                for (var a = 0; a < t; a++) {
                    if (a % 4) {
                        var f = n.indexOf(e.charAt(a - 1)) << a % 4 * 2;
                        var l = n.indexOf(e.charAt(a)) >>> 6 - a % 4 * 2;
                        o[u >>> 2] |= (f | l) << 24 - u % 4 * 8;
                        u++
                    }
                }
                return s.create(o, u)
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        var c = r.BufferedBlockAlgorithm = i.extend({
            reset: function() {
                this._data = new s.init;
                this._nDataBytes = 0
            },
            _append: function(e) {
                if (typeof e == "string") {
                    e = f.parse(e)
                }
                this._data.concat(e);
                this._nDataBytes += e.sigBytes
            },
            _process: function(t) {
                var n = this._data;
                var r = n.words;
                var i = n.sigBytes;
                var o = this.blockSize;
                var u = o * 4;
                var a = i / u;
                if (t) {
                    a = e.ceil(a)
                } else {
                    a = e.max((a | 0) - this._minBufferSize, 0)
                }
                var f = a * o;
                var l = e.min(f * 4, i);
                if (f) {
                    for (var c = 0; c < f; c += o) {
                        this._doProcessBlock(r, c)
                    }
                    var h = r.splice(0, f);
                    n.sigBytes -= l
                }
                return new s.init(h, l)
            },
            clone: function() {
                var e = i.clone.call(this);
                e._data = this._data.clone();
                return e
            },
            _minBufferSize: 0
        });
        var h = r.Hasher = c.extend({
            cfg: i.extend(),
            init: function(e) {
                this.cfg = this.cfg.extend(e);
                this.reset()
            },
            reset: function() {
                c.reset.call(this);
                this._doReset()
            },
            update: function(e) {
                this._append(e);
                this._process();
                return this
            },
            finalize: function(e) {
                if (e) {
                    this._append(e)
                }
                var t = this._doFinalize();
                return t
            },
            blockSize: 512 / 32,
            _createHelper: function(e) {
                return function(t, n) {
                    return (new e.init(n)).finalize(t)
                }
            },
            _createHmacHelper: function(e) {
                return function(t, n) {
                    return (new p.HMAC.init(e, n)).finalize(t)
                }
            }
        });
        var p = n.algo = {};
        var d = [];
        var v = p.SHA1 = h.extend({
            _doReset: function() {
                this._hash = new s.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
            },
            _doProcessBlock: function(e, t) {
                var n = this._hash.words;
                var r = n[0];
                var i = n[1];
                var s = n[2];
                var o = n[3];
                var u = n[4];
                for (var a = 0; a < 80; a++) {
                    if (a < 16) {
                        d[a] = e[t + a] | 0
                    } else {
                        var f = d[a - 3] ^ d[a - 8] ^ d[a - 14] ^ d[a - 16];
                        d[a] = f << 1 | f >>> 31
                    }
                    var l = (r << 5 | r >>> 27) + u + d[a];
                    if (a < 20) {
                        l += (i & s | ~i & o) + 1518500249
                    } else if (a < 40) {
                        l += (i ^ s ^ o) + 1859775393
                    } else if (a < 60) {
                        l += (i & s | i & o | s & o) - 1894007588
                    } else {
                        l += (i ^ s ^ o) - 899497514
                    }
                    u = o;
                    o = s;
                    s = i << 30 | i >>> 2;
                    i = r;
                    r = l
                }
                n[0] = n[0] + r | 0;
                n[1] = n[1] + i | 0;
                n[2] = n[2] + s | 0;
                n[3] = n[3] + o | 0;
                n[4] = n[4] + u | 0
            },
            _doFinalize: function() {
                var t = this._data;
                var n = t.words;
                var r = this._nDataBytes * 8;
                var i = t.sigBytes * 8;
                n[i >>> 5] |= 128 << 24 - i % 32;
                n[(i + 64 >>> 9 << 4) + 14] = e.floor(r / 4294967296);
                n[(i + 64 >>> 9 << 4) + 15] = r;
                t.sigBytes = n.length * 4;
                this._process();
                return this._hash
            },
            clone: function() {
                var e = h.clone.call(this);
                e._hash = this._hash.clone();
                return e
            }
        });
        n.SHA1 = h._createHelper(v);
        n.HmacSHA1 = h._createHmacHelper(v);
        return n
    }(Math);
(function(e) {
    e.verbs = {
        answered: {
            id: "http://adlnet.gov/expapi/verbs/answered",
            display: {
                "en-US": "answered"
            }
        },
        asked: {
            id: "http://adlnet.gov/expapi/verbs/asked",
            display: {
                "en-US": "asked"
            }
        },
        attempted: {
            id: "http://adlnet.gov/expapi/verbs/attempted",
            display: {
                "en-US": "attempted"
            }
        },
        attended: {
            id: "http://adlnet.gov/expapi/verbs/attended",
            display: {
                "en-US": "attended"
            }
        },
        commented: {
            id: "http://adlnet.gov/expapi/verbs/commented",
            display: {
                "en-US": "commented"
            }
        },
        completed: {
            id: "http://adlnet.gov/expapi/verbs/completed",
            display: {
                "en-US": "completed"
            }
        },
        exited: {
            id: "http://adlnet.gov/expapi/verbs/exited",
            display: {
                "en-US": "exited"
            }
        },
        experienced: {
            id: "http://adlnet.gov/expapi/verbs/experienced",
            display: {
                "en-US": "experienced"
            }
        },
        failed: {
            id: "http://adlnet.gov/expapi/verbs/failed",
            display: {
                "en-US": "failed"
            }
        },
        imported: {
            id: "http://adlnet.gov/expapi/verbs/imported",
            display: {
                "en-US": "imported"
            }
        },
        initialized: {
            id: "http://adlnet.gov/expapi/verbs/initialized",
            display: {
                "en-US": "initialized"
            }
        },
        interacted: {
            id: "http://adlnet.gov/expapi/verbs/interacted",
            display: {
                "en-US": "interacted"
            }
        },
        launched: {
            id: "http://adlnet.gov/expapi/verbs/launched",
            display: {
                "en-US": "launched"
            }
        },
        mastered: {
            id: "http://adlnet.gov/expapi/verbs/mastered",
            display: {
                "en-US": "mastered"
            }
        },
        passed: {
            id: "http://adlnet.gov/expapi/verbs/passed",
            display: {
                "en-US": "passed"
            }
        },
        preferred: {
            id: "http://adlnet.gov/expapi/verbs/preferred",
            display: {
                "en-US": "preferred"
            }
        },
        progressed: {
            id: "http://adlnet.gov/expapi/verbs/progressed",
            display: {
                "en-US": "progressed"
            }
        },
        registered: {
            id: "http://adlnet.gov/expapi/verbs/registered",
            display: {
                "en-US": "registered"
            }
        },
        responded: {
            id: "http://adlnet.gov/expapi/verbs/responded",
            display: {
                "en-US": "responded"
            }
        },
        resumed: {
            id: "http://adlnet.gov/expapi/verbs/resumed",
            display: {
                "en-US": "resumed"
            }
        },
        scored: {
            id: "http://adlnet.gov/expapi/verbs/scored",
            display: {
                "en-US": "scored"
            }
        },
        shared: {
            id: "http://adlnet.gov/expapi/verbs/shared",
            display: {
                "en-US": "shared"
            }
        },
        suspended: {
            id: "http://adlnet.gov/expapi/verbs/suspended",
            display: {
                "en-US": "suspended"
            }
        },
        terminated: {
            id: "http://adlnet.gov/expapi/verbs/terminated",
            display: {
                "en-US": "terminated"
            }
        },
        voided: {
            id: "http://adlnet.gov/expapi/verbs/voided",
            display: {
                "en-US": "voided"
            }
        }
    }
})(window.ADL = window.ADL || {});
(function(e) {
    function t(e, n) {
        var r = n.split(".");
        var i = r[0];
        n = r.slice(1).join(".");
        if (!e[i]) {
            if (/\[\]$/.test(i)) {
                i = i.slice(0, -2);
                e[i] = []
            } else e[i] = {}
        }
        if (!n) return e[i];
        else return t(e[i], n)
    }
    var n = function(t, n, f) {
        if (t && t.actor && t.verb && t.object) {
            var l = t;
            for (var c in l) {
                if (c != "actor" && c != "verb" && c != "object") this[c] = l[c]
            }
            t = l.actor;
            n = l.verb;
            f = l.object
        }
        if (t) {
            if (t instanceof r) this.actor = t;
            else if (t.objectType === "Agent" || !t.objectType) this.actor = new r(t);
            else if (t.objectType === "Group") this.actor = new i(t)
        } else this.actor = null; if (n) {
            if (n instanceof s) this.verb = n;
            else this.verb = new s(n)
        } else this.verb = null; if (f) {
            if (f.objectType === "Activity" || !f.objectType) {
                if (f instanceof o) this.object = f;
                else this.object = new o(f)
            } else if (f.objectType === "Agent") {
                if (f instanceof r) this.object = f;
                else this.object = new r(f)
            } else if (f.objectType === "Group") {
                if (f instanceof i) this.object = f;
                else this.object = new i(f)
            } else if (f.objectType === "StatementRef") {
                if (f instanceof u) this.object = f;
                else this.object = new u(f)
            } else if (f.objectType === "SubStatement") {
                if (f instanceof a) this.object = f;
                else this.object = new a(f)
            } else this.object = null
        } else this.object = null;
        this.generateId = function() {
            this.id = e.ruuid()
        }
    };
    n.prototype.toString = function() {
        return this.actor.toString() + " " + this.verb.toString() + " " + this.object.toString()
    };
    n.prototype.isValid = function() {
        return this.actor && this.actor.isValid() && this.verb && this.verb.isValid() && this.object && this.object.isValid()
    };
    n.prototype.generateRegistration = function() {
        t(this, "context").registration = e.ruuid()
    };
    n.prototype.addParentActivity = function(e) {
        t(this, "context.contextActivities.parent[]").push(new o(e))
    };
    n.prototype.addGroupingActivity = function(e) {
        t(this, "context.contextActivities.grouping[]").push(new o(e))
    };
    n.prototype.addOtherContextActivity = function(e) {
        t(this, "context.contextActivities.other[]").push(new o(e))
    };
    var r = function(e, t) {
        this.objectType = "Agent";
        this.name = t;
        if (e && (e.mbox || e.mbox_sha1sum || e.openid || e.account)) {
            for (var n in e) {
                this[n] = e[n]
            }
        } else if (/^mailto:/.test(e)) {
            this.mbox = e
        } else if (/^[0-9a-f]{20}$/i.test(e)) {
            this.mbox_sha1sum = e
        } else if (/^http[s]?:/.test(e)) {
            this.openid = e
        } else if (e && e.homePage && e.name) {
            this.account = e
        }
    };
    r.prototype.toString = function() {
        return this.name || this.mbox || this.openid || this.mbox_sha1sum || this.account.name
    };
    r.prototype.isValid = function() {
        return this.mbox || this.mbox_sha1sum || this.openid || this.account.homePage && this.account.name || this.objectType === "Group" && this.member
    };
    var i = function(e, t, n) {
        r.call(this, e, n);
        this.member = t;
        this.objectType = "Group"
    };
    i.prototype = new r;
    var s = function(e, t) {
        if (e && e.id) {
            for (var n in e) {
                this[n] = e[n]
            }
            return
        }
        this.id = e;
        if (t) {
            if (typeof t === "string" || t instanceof String) {
                this.display = {
                    "en-US": t
                }
            } else {
                this.display = t
            }
        }
    };
    s.prototype.toString = function() {
        if (this.display && (this.display["en-US"] || this.display["en"])) return this.display["en-US"] || this.display["en"];
        else return this.id
    };
    s.prototype.isValid = function() {
        return this.id
    };
    var o = function(e, t, n) {
        if (e && e.id) {
            var r = e;
            for (var i in r) {
                this[i] = r[i]
            }
            return
        }
        this.objectType = "Activity";
        this.id = e;
        if (t || n) {
            this.definition = {};
            if (typeof t === "string" || t instanceof String) this.definition.name = {
                "en-US": t
            };
            else if (t) this.definition.name = t;
            if (typeof n === "string" || n instanceof String) this.definition.description = {
                "en-US": n
            };
            else if (n) this.definition.description = n
        }
    };
    o.prototype.toString = function() {
        if (this.definition && this.definition.name && (this.definition.name["en-US"] || this.definition.name["en"])) return this.definition.name["en-US"] || this.definition.name["en"];
        else return this.id
    };
    o.prototype.isValid = function() {
        return this.id && (!this.objectType || this.objectType === "Activity")
    };
    var u = function(e) {
        if (e && e.id) {
            for (var t in e) {
                this[t] = e[t]
            }
        } else {
            this.objectType = "StatementRef";
            this.id = e
        }
    };
    u.prototype.toString = function() {
        return "statement(" + this.id + ")"
    };
    u.prototype.isValid = function() {
        return this.id && this.objectType && this.objectType === "StatementRef"
    };
    var a = function(e, t, r) {
        n.call(this, e, t, r);
        this.objectType = "SubStatement";
        delete this.id;
        delete this.stored;
        delete this.version;
        delete this.authority
    };
    a.prototype = new n;
    a.prototype.toString = function() {
        return '"' + a.prototype.prototype.toString.call(this) + '"'
    };
    n.Agent = r;
    n.Group = i;
    n.Verb = s;
    n.Activity = o;
    n.StatementRef = u;
    n.SubStatement = a;
    e.XAPIStatement = n
})(window.ADL = window.ADL || {});
if (!Date.prototype.toISOString) {
    (function() {
        function e(e) {
            var t = String(e);
            if (t.length === 1) {
                t = "0" + t
            }
            return t
        }
        Date.prototype.toISOString = function() {
            return this.getUTCFullYear() + "-" + e(this.getUTCMonth() + 1) + "-" + e(this.getUTCDate()) + "T" + e(this.getUTCHours()) + ":" + e(this.getUTCMinutes()) + ":" + e(this.getUTCSeconds()) + "." + String((this.getUTCMilliseconds() / 1e3).toFixed(3)).slice(2, 5) + "Z"
        }
    })()
}(function(e) {
    function n() {
        try {
            return this.lrs.endpoint != undefined && this.lrs.endpoint != ""
        } catch (e) {
            return false
        }
    }

    function r(e) {
        if (!r.debug) return false;
        try {
            console.log(e);
            return true
        } catch (t) {
            return false
        }
    }

    function i(e, t) {
        for (var n in t) {
            prop = t[n];
            console.log(n + " : " + prop);
            try {
                if (t[n].constructor == Object) {
                    e[n] = i(e[n], t[n])
                } else {
                    if (e == undefined) {
                        e = new Object
                    }
                    e[n] = t[n]
                }
            } catch (r) {
                if (e == undefined) {
                    e = new Object
                }
                e[n] = t[n]
            }
        }
        return e
    }

    function o(e) {
        var t = ["endpoint", "auth", "actor", "registration", "activity_id", "grouping", "activity_platform"];
        var n = new Object;
        var r, s;
        r = u();
        if (r !== undefined && Object.keys(r).length !== 0) {
            for (var o = 0; o < t.length; o++) {
                s = t[o];
                if (r[s]) {
                    n[s] = r[s];
                    delete r[s]
                }
            }
            if (Object.keys(r).length !== 0) {
                n.extended = r
            }
            n = i(e, n)
        } else {
            n = e
        }
        return n
    }

    function u() {
        var e, t, n, r, i, s;
        e = window.location.href.split("?");
        if (e.length === 2) {
            t = e[1];
            n = t.split("&");
            s = {};
            for (i = 0; i < n.length; i++) {
                r = n[i].split("=");
                if (r.length === 2 && r[0]) {
                    s[r[0]] = decodeURIComponent(r[1])
                }
            }
        }
        return s
    }

    function a() {
        var t = new XMLHttpRequest;
        var n = window.location + "?forcenocache=" + e.ruuid();
        t.open("GET", n, false);
        t.send(null)
    }

    function f(e, t, n, r) {
        var i = t;
        var s = new Array;
        var o = i.indexOf("?");
        if (o > 0) {
            s.push(i.substr(o + 1));
            i = i.substr(0, o)
        }
        i = i + "?method=" + e;
        if (n !== null) {
            for (var u in n) {
                s.push(u + "=" + encodeURIComponent(n[u]))
            }
        }
        if (r !== null) {
            s.push("content=" + encodeURIComponent(r))
        }
        return {
            method: "POST",
            url: i,
            headers: {},
            data: s.join("&")
        }
    }
    r.debug = true;
    var t = function() {
        var e = {};
        e["endpoint"] = "http://localhost:8000/xapi/";
        try {
            e["auth"] = "Basic " + toBase64("tom:1234")
        } catch (t) {
            r("Exception in Config trying to encode auth: " + t)
        }
        return e
    }();
    XAPIWrapper = function(t, r) {
        function s(t) {
            var n = document.createElement("a");
            n.href = t;
            if (n.protocol && n.host) return n.protocol + "//" + n.host;
            else e.XAPIWrapper.log("Couldn't create base url from endpoint: " + this.lrs.endpoint)
        }

        function u(e, t, n) {
            e.auth = "Basic " + toBase64(t + ":" + n)
        }
        this.lrs = o(t || {});
        if (this.lrs.user && this.lrs.password) u(this.lrs, this.lrs.user, this.lrs.password);
        this.base = s(this.lrs.endpoint);
        if (r && n.call(this)) {
            window.ADL.XHR_request(this.lrs, this.lrs.endpoint + "about", "GET", null, null, function(t) {
                if (t.status == 200) {
                    try {
                        var n = JSON.parse(t.response);
                        var r = false;
                        for (var i in n.version) {
                            if (n.version[i] == e.XAPIWrapper.xapiVersion) {
                                r = true;
                                break
                            }
                        }
                        if (!r) {
                            e.XAPIWrapper.log("The lrs version [" + n.version + "]" + " does not match this wrapper's XAPI version [" + e.XAPIWrapper.xapiVersion + "]")
                        }
                    } catch (s) {
                        e.XAPIWrapper.log("The response was not an about object")
                    }
                } else {
                    e.XAPIWrapper.log("The request to get information about the LRS failed: " + t)
                }
            })
        }
        this.searchParams = function() {
            var e = {
                format: "exact"
            };
            return e
        };
        this.hash = function(t) {
            if (!t) return null;
            try {
                return toSHA1(t)
            } catch (n) {
                e.XAPIWrapper.log("Error trying to hash -- " + n);
                return null
            }
        };
        this.changeConfig = function(t) {
            try {
                e.XAPIWrapper.log("updating lrs object with new configuration");
                this.lrs = i(this.lrs, t);
                if (t.user && t.password) this.updateAuth(this.lrs, t.user, t.password);
                this.base = s(this.lrs.endpoint)
            } catch (n) {
                e.XAPIWrapper.log("error while changing configuration -- " + n)
            }
        };
        this.updateAuth = u
    };
    XAPIWrapper.prototype.xapiVersion = "1.0.1";
    XAPIWrapper.prototype.build = "2014-04-16T14:00Z";
    XAPIWrapper.prototype.prepareStatement = function(e) {
        if (e.actor === undefined) {
            e.actor = JSON.parse(this.lrs.actor)
        } else if (typeof e.actor === "string") {
            e.actor = JSON.parse(e.actor)
        }
        if (this.lrs.grouping || this.lrs.registration || this.lrs.activity_platform) {
            if (!e.context) {
                e.context = {}
            }
        }
        if (this.lrs.grouping) {
            if (!e.context.contextActivities) {
                e.context.contextActivities = {}
            }
            e.context.contextActivities.grouping = [{
                id: this.lrs.grouping
            }]
        }
        if (this.lrs.registration) {
            e.context.registration = this.lrs.registration
        }
        if (this.lrs.activity_platform) {
            e.context.platform = this.lrs.activity_platform
        }
    };
    XAPIWrapper.prototype.testConfig = n;
    XAPIWrapper.prototype.log = r;
    XAPIWrapper.prototype.sendStatement = function(t, n) {
        if (this.testConfig()) {
            this.prepareStatement(t);
            var r;
            if (t["id"]) {
                r = t["id"]
            } else {
                r = e.ruuid();
                t["id"] = r
            }
            var i = e.XHR_request(this.lrs, this.lrs.endpoint + "statements", "POST", JSON.stringify(t), this.lrs.auth, n, {
                id: r
            });
            if (!n) return {
                xhr: i,
                id: r
            }
        }
    };
    XAPIWrapper.prototype.sendStatements = function(t, n) {
        if (this.testConfig()) {
            for (var r in t) {
                this.prepareStatement(t[r])
            }
            var i = e.XHR_request(this.lrs, this.lrs.endpoint + "statements", "POST", JSON.stringify(t), this.lrs.auth, n);
            if (!n) {
                return i
            }
        }
    };
    XAPIWrapper.prototype.getStatements = function(t, n, r) {
        if (this.testConfig()) {
            var i = this.lrs.endpoint + "statements";
            if (n) {
                i = this.base + n
            } else {
                var o = new Array;
                for (s in t) {
                    o.push(s + "=" + encodeURIComponent(t[s]))
                }
                if (o.length > 0) i = i + "?" + o.join("&")
            }
            var u = e.XHR_request(this.lrs, i, "GET", null, this.lrs.auth, r);
            if (u === undefined || u.status == 404) {
                return null
            }
            try {
                return JSON.parse(u.response)
            } catch (a) {
                return u.response
            }
        }
    };
    XAPIWrapper.prototype.getActivities = function(t, n) {
        if (this.testConfig()) {
            var r = this.lrs.endpoint + "activities?activityId=<activityid>";
            r = r.replace("<activityid>", encodeURIComponent(t));
            var i = e.XHR_request(this.lrs, r, "GET", null, this.lrs.auth, n, null, true);
            if (i === undefined || i.status == 404) {
                return null
            }
            try {
                return JSON.parse(i.response)
            } catch (s) {
                return i.response
            }
        }
    };
    XAPIWrapper.prototype.sendState = function(t, n, i, s, o, u, a, f) {
        if (this.testConfig()) {
            var l = this.lrs.endpoint + "activities/state?activityId=<activity ID>&agent=<agent>&stateId=<stateid>";
            l = l.replace("<activity ID>", encodeURIComponent(t));
            l = l.replace("<agent>", encodeURIComponent(JSON.stringify(n)));
            l = l.replace("<stateid>", encodeURIComponent(i));
            if (s) {
                l += "&registration=" + encodeURIComponent(s)
            }
            var c = null;
            if (u && a) {
                r("Can't have both If-Match and If-None-Match")
            } else if (u) {
                c = {
                    "If-Match": '"' + u + '"'
                }
            } else if (a) {
                c = {
                    "If-None-Match": '"' + a + '"'
                }
            }
            var h = "PUT";
            if (o) {
                if (o instanceof Array) {
                    o = JSON.stringify(o);
                    c = c || {};
                    c["Content-Type"] = "application/json"
                } else if (o instanceof Object) {
                    o = JSON.stringify(o);
                    c = c || {};
                    c["Content-Type"] = "application/json";
                    h = "POST"
                } else {
                    c = c || {};
                    c["Content-Type"] = "application/octect-stream"
                }
            } else {
                this.log("No activity state was included.");
                return false
            }
            e.XHR_request(this.lrs, l, h, o, this.lrs.auth, f, null, null, c)
        }
    };
    XAPIWrapper.prototype.getState = function(t, n, r, i, s, o) {
        if (this.testConfig()) {
            var u = this.lrs.endpoint + "activities/state?activityId=<activity ID>&agent=<agent>";
            u = u.replace("<activity ID>", encodeURIComponent(t));
            u = u.replace("<agent>", encodeURIComponent(JSON.stringify(n)));
            if (r) {
                u += "&stateId=" + encodeURIComponent(r)
            }
            if (i) {
                u += "&registration=" + encodeURIComponent(i)
            }
            if (s) {
                u += "&since=" + encodeURIComponent(s.toISOString())
            }
            var a = e.XHR_request(this.lrs, u, "GET", null, this.lrs.auth, o, null, true);
            if (a === undefined || a.status == 404) {
                return null
            }
            try {
                return JSON.parse(a.response)
            } catch (f) {
                return a.response
            }
        }
    };
    XAPIWrapper.prototype.sendActivityProfile = function(t, n, i, s, o, u) {
        if (this.testConfig()) {
            var a = this.lrs.endpoint + "activities/profile?activityId=<activity ID>&profileId=<profileid>";
            a = a.replace("<activity ID>", encodeURIComponent(t));
            a = a.replace("<profileid>", encodeURIComponent(n));
            var f = null;
            if (s && o) {
                r("Can't have both If-Match and If-None-Match")
            } else if (s) {
                f = {
                    "If-Match": '"' + s + '"'
                }
            } else if (o) {
                f = {
                    "If-None-Match": '"' + o + '"'
                }
            }
            var l = "PUT";
            if (i) {
                if (i instanceof Array) {
                    i = JSON.stringify(i);
                    f = f || {};
                    f["Content-Type"] = "application/json"
                } else if (i instanceof Object) {
                    i = JSON.stringify(i);
                    f = f || {};
                    f["Content-Type"] = "application/json";
                    l = "POST"
                } else {
                    f = f || {};
                    f["Content-Type"] = "application/octect-stream"
                }
            } else {
                this.log("No activity profile was included.");
                return false
            }
            e.XHR_request(this.lrs, a, l, i, this.lrs.auth, u, null, false, f)
        }
    };
    XAPIWrapper.prototype.getActivityProfile = function(t, n, r, i) {
        if (this.testConfig()) {
            var s = this.lrs.endpoint + "activities/profile?activityId=<activity ID>";
            s = s.replace("<activity ID>", encodeURIComponent(t));
            if (n) {
                s += "&profileId=" + encodeURIComponent(n)
            }
            if (r) {
                s += "&since=" + encodeURIComponent(r.toISOString())
            }
            var o = e.XHR_request(this.lrs, s, "GET", null, this.lrs.auth, i, null, true);
            if (o === undefined || o.status == 404) {
                return null
            }
            try {
                return JSON.parse(o.response)
            } catch (u) {
                return o.response
            }
        }
    };
    XAPIWrapper.prototype.getAgents = function(t, n) {
        if (this.testConfig()) {
            var r = this.lrs.endpoint + "agents?agent=<agent>";
            r = r.replace("<agent>", encodeURIComponent(JSON.stringify(t)));
            var i = e.XHR_request(this.lrs, r, "GET", null, this.lrs.auth, n, null, true);
            if (i === undefined || i.status == 404) {
                return null
            }
            try {
                return JSON.parse(i.response)
            } catch (s) {
                return i.response
            }
        }
    };
    XAPIWrapper.prototype.sendAgentProfile = function(t, n, i, s, o, u) {
        if (this.testConfig()) {
            var a = this.lrs.endpoint + "agents/profile?agent=<agent>&profileId=<profileid>";
            a = a.replace("<agent>", encodeURIComponent(JSON.stringify(t)));
            a = a.replace("<profileid>", encodeURIComponent(n));
            var f = null;
            if (s && o) {
                r("Can't have both If-Match and If-None-Match")
            } else if (s) {
                f = {
                    "If-Match": '"' + s + '"'
                }
            } else if (o) {
                f = {
                    "If-None-Match": '"' + o + '"'
                }
            }
            var l = "PUT";
            if (i) {
                if (i instanceof Array) {
                    i = JSON.stringify(i);
                    f = f || {};
                    f["Content-Type"] = "application/json"
                } else if (i instanceof Object) {
                    i = JSON.stringify(i);
                    f = f || {};
                    f["Content-Type"] = "application/json";
                    l = "POST"
                } else {
                    f = f || {};
                    f["Content-Type"] = "application/octect-stream"
                }
            } else {
                this.log("No agent profile was included.");
                return false
            }
            e.XHR_request(this.lrs, a, l, i, this.lrs.auth, u, null, false, f)
        }
    };
    XAPIWrapper.prototype.getAgentProfile = function(t, n, r, i) {
        if (this.testConfig()) {
            var s = this.lrs.endpoint + "agents/profile?agent=<agent>";
            s = s.replace("<agent>", encodeURIComponent(JSON.stringify(t)));
            s = s.replace("<profileid>", encodeURIComponent(n));
            if (n) {
                s += "&profileId=" + encodeURIComponent(n)
            }
            if (r) {
                s += "&since=" + encodeURIComponent(r.toISOString())
            }
            var o = e.XHR_request(this.lrs, s, "GET", null, this.lrs.auth, i, null, true);
            if (o === undefined || o.status == 404) {
                return null
            }
            try {
                return JSON.parse(o.response)
            } catch (u) {
                return o.response
            }
        }
    };
    e.ruuid = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var t = Math.SecureRandom() * 16 | 0,
                n = e == "x" ? t : t & 3 | 8;
            return n.toString(16)
        })
    };
    e.dateFromISOString = function(e) {
        var t = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" + "([T| ]([0-9]{2}):([0-9]{2})(:([0-9]{2})(.([0-9]+))?)?" + "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
        var n = e.match(new RegExp(t));
        var r = 0;
        var i = new Date(n[1], 0, 1);
        if (n[3]) {
            i.setMonth(n[3] - 1)
        }
        if (n[5]) {
            i.setDate(n[5])
        }
        if (n[7]) {
            i.setHours(n[7])
        }
        if (n[8]) {
            i.setMinutes(n[8])
        }
        if (n[10]) {
            i.setSeconds(n[10])
        }
        if (n[12]) {
            i.setMilliseconds(Number("0." + n[12]) * 1e3)
        }
        if (n[14]) {
            r = Number(n[16]) * 60 + Number(n[17]);
            r *= n[15] == "-" ? 1 : -1
        }
        r -= i.getTimezoneOffset();
        time = Number(i) + r * 60 * 1e3;
        var s = new Date;
        s.setTime(Number(time));
        return s
    };
    e.XHR_request = function(t, n, r, i, s, o, u, l, c) {
        "use strict";

        function C() {
            if (!p) {
                p = true;
                var e = l && h.status === 404;
                if (h.status === undefined || h.status >= 200 && h.status < 400 || e) {
                    if (o) {
                        if (u) {
                            o(h, u)
                        } else {
                            try {
                                var t = JSON.parse(h.responseText);
                                o(h, t)
                            } catch (n) {
                                o(h, h.responseText)
                            }
                        }
                    } else {
                        w = h;
                        return h
                    }
                } else {
                    try {
                        console.warn("There was a problem communicating with the Learning Record Store. ( " + h.status + " | " + h.response + " )" + h.url)
                    } catch (r) {
                        console.warn(r.toString())
                    }
                    w = h;
                    return h
                }
            } else {
                return w
            }
        }
        var h, p = false,
            d = false,
            v = false,
            m, g = n.toLowerCase().match(/^(.+):\/\/([^:\/]*):?(\d+)?(\/.*)?$/),
            y = window.location,
            b, w, E, S, x;
        var T = {};
        T["Content-Type"] = "application/json";
        T["Authorization"] = s;
        T["X-Experience-API-Version"] = e.XAPIWrapper.xapiVersion;
        if (c !== null) {
            for (var N in c) {
                T[N] = c[N]
            }
        }
        d = y.protocol.toLowerCase() !== g[1] || y.hostname.toLowerCase() !== g[2];
        if (!d) {
            b = g[3] === null ? g[1] === "http" ? "80" : "443" : g[3];
            d = b === y.port
        }
        if (!d || typeof XDomainRequest === "undefined") {
            h = new XMLHttpRequest;
            h.open(r, n, o != null);
            for (var N in T) {
                h.setRequestHeader(N, T[N])
            }
        } else {
            v = true;
            m = f(r, n, T, i);
            h = new XDomainRequest;
            h.open(m.method, m.url)
        }
        h.onreadystatechange = function() {
            if (h.readyState === 4) {
                return C()
            }
        };
        h.onload = C;
        h.onerror = C;
        h.send(v ? m.data : i);
        if (!o) {
            if (v) {
                x = 1e3 + new Date;
                while (new Date < x && h.readyState !== 4 && !p) {
                    a()
                }
            }
            return C()
        }
    };
    e.XAPIWrapper = new XAPIWrapper(t, false)
})(window.ADL = window.ADL || {})