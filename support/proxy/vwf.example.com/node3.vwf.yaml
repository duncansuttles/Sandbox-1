# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

---
extends: http://vwf.example.com/node.vwf
implements:
- http://vwf.example.com/xapi.vwf
properties:
  lookAxis: 2
  upAxis: [ 0, 0, 1]
  inheritScale: true
  audioAPI:
    get: |
          if(!this._audioAPI)
          {
            Object.defineProperty(this,"_audioAPI",{enumerable:false,writable:true});
            this._audioAPI = {};
            this._audioAPI.___self = this;
            this._audioAPI.playSound=function(soundURL /* the url of the sound */, loop /* loop or not */, volume)
            {
                vwf.callMethod(this.id,'playSound',[soundURL,loop,volume])
                
            }
            this._audioAPI.stopSound=function(soundURL /* the url of the sound */)
            {
                vwf.callMethod(this.id,'stopSound',[soundURL])
               
            }
           this._audioAPI.pauseSound=function(soundURL /* the url of the sound */)
            {
                vwf.callMethod(this.id,'pauseSound',[soundURL])
               
            }
            this._audioAPI.deleteSound=function(soundURL /* the url of the sound */)
            {
                vwf.callMethod(this.id,'deleteSound',[soundURL])
                
            }
           }
           return this._audioAPI;
  transformAPI:
    get: |
        if(!this._tapi)
        {
            Object.defineProperty(this,"_tapi",{enumerable:false,writable:true});
            var self = this;
            this._tapi = 
            {
                
                move:function(x,y,z, coordinateSystem /* x,y,z in meters, coordinateSystem either 'global' or 'local' */){
                
                   
                    if(x.length)
                    {
                        coordinateSystem = y;
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    
                    if(!coordinateSystem)
                     coordinateSystem = 'parent';
                     
                    if( coordinateSystem== 'parent')
                    {                       
                       var position = self.transformAPI.getPosition();
                       position = Vec3.add(position,[x,y,z],[]);                      
                       self.transformAPI.setPosition(position);
                    }
                    
                    if( coordinateSystem== 'local')
                    {                       
                       var position = self.transformAPI.getPosition();
                       var offset = Mat4.multVec3NoTranslate(self.transform,[x,y,z],[]);
                       position = Vec3.add(position,offset,[]);                      
                       self.transformAPI.setPosition(position);
                    }
                    
                    
                
                
                
                },
                getPosition: function()
                {
                    var transform = self.transform.internal_val;
                    return [transform[12],transform[13],transform[14]];
                },
                getWorldPosition: function()
                {
                    var transform = self.worldTransform.internal_val;
                    return [transform[12],transform[13],transform[14]];
                },
                localToGlobal: function(x,y,z)
                {
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    var vec = [x,y,z];
                    var targetTransform = self.worldTransform.internal_val;
                   
                    vec = Mat4.multVec3(targetTransform,vec,[]);
                    return vec;
                },
                localToGlobalRotation: function(x,y,z)
                {
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    var vec = [x,y,z];
                    var targetTransform = self.worldTransform.internal_val;
                   
                    vec = Mat4.multVec3NoTranslate(targetTransform,vec,[]);
                    return vec;
                },
                globalToLocal: function(x,y,z)
                {
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    var vec = [x,y,z];
                    var targetTransform = self.worldTransform.internal_val;
                    
                    var invTransform = Mat4.create();
                    Mat4.invert(targetTransform,invTransform);
                    vec = Mat4.multVec3(invTransform,vec,[]);
                    return vec;
                },
                globalToLocalRotation: function(x,y,z)
                {
                  
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    var vec = [x,y,z];
                    vec[0] /= 57.2957795;
                    vec[1] /= 57.2957795;
                    vec[2] /= 57.2957795;

                    var targetTransform = self.worldTransform.internal_val;
                    var mat = Mat4.makeEulerZXZ([],x,y,z);

                    var invTransform = Mat4.create();
                    Mat4.invert(targetTransform,invTransform);
                    var mat = Mat4.multMat(mat,invTransform,[]);
                    Mat4.toEulerZXZ(mat,vec);

                    vec[0] *= 57.2957795;
                    vec[1] *= 57.2957795;
                    vec[2] *= 57.2957795;

                    return vec;
                },
                setPosition: function(x,y,z)
                {
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    var transform = self.transform;
                    transform[12] = x;
                    transform[13] = y;
                    transform[14] = z;
                },
                rotate:function(x,y,z,coordinateSystem)
                {
                    if(x.length)
                    {
                        coordinateSystem = y;
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    
                    self.transformAPI.rotateX(x,coordinateSystem);
                    self.transformAPI.rotateY(y,coordinateSystem);
                    self.transformAPI.rotateZ(z,coordinateSystem);
                },
                rotateX : function(angle,coordinateSystem)
                {
                    self.transformAPI.rotateAroundAxis(angle,[1,0,0],coordinateSystem);
                },
                rotateY : function(angle,coordinateSystem)
                {
                    self.transformAPI.rotateAroundAxis(angle,[0,1,0],coordinateSystem);
                },
                rotateZ : function(angle,coordinateSystem)
                {
                    self.transformAPI.rotateAroundAxis(angle,[0,0,1],coordinateSystem);
                },
                COORDINATES:{LOCAL:'local','GLOBAL':'global',PARENT:'parent'},
                rotateAroundAxis: function(angle,axis,coordinateSystem)
                {
                    axis = Vec3.normalize(axis,[]);
                    if(!coordinateSystem)
                     coordinateSystem = 'parent';
                    if( coordinateSystem== 'local')
                    {
                       var axis = Mat4.multVec3NoTranslate(self.transform,axis,[]);
                    }
                    angle /=  57.2957795;
                    var rotmat = Mat4.makeRotate([],angle,axis[0],axis[1],axis[2]);
                    var position = self.transformAPI.getPosition();
                    var scale = self.transformAPI.getScale();
                    var transform = self.transform.internal_val;
                    transform[12] = 0;
                    transform[13] = 0;
                    transform[14] = 0;
                    transform = Mat4.multMat(rotmat,transform,[]);
                    transform[12] = position[0];
                    transform[13] = position[1];
                    transform[14] = position[2];
                    transform = self.transformAPI.scaleMatrix(scale,transform);
                    self.transform = transform;
                },
                getRotation: function()
                {
                    var m = self.transform.internal_val;
                    var x = Math.atan2(m[9], m[10]);
                    var y = Math.atan2(-m[8], Math.sqrt(m[9] * m[9] + m[10] * m[10]));
                    var z = Math.atan2(m[4], m[0]);
                    
                    var euler = [x,y,z];

                    euler[0] *= 57.2957795;
                    euler[1] *= 57.2957795;
                    euler[2] *= 57.2957795;
                    
                    return euler;
                
                },
                setRotation: function(x,y,z)
                {
                
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                   
                    x /= 57.2957795;
                    y /= 57.2957795;
                    z /= 57.2957795;
                    
                    var xm = [

                    1, 0, 0, 0,
                    0, Math.cos(x), -Math.sin(x), 0,
                    0, Math.sin(x), Math.cos(x), 0,
                    0, 0, 0, 1

                    ];

                    var ym = [

                        Math.cos(y), 0, Math.sin(y), 0,
                        0, 1, 0, 0, -Math.sin(y), 0, Math.cos(y), 0,
                        0, 0, 0, 1
                    ];

                    var zm = [

                        Math.cos(z), -Math.sin(z), 0, 0,
                        Math.sin(z), Math.cos(z), 0, 0,
                        0, 0, 1, 0,
                        0, 0, 0, 1

                    ];
                    var mat = goog.vec.Mat4.multMat(xm, goog.vec.Mat4.multMat(ym, zm, []), []);
                    var pos = self.transformAPI.getPosition();
                    
                    var scale = self.transformAPI.getScale();
                    
                    mat[12] = pos[0];
                    mat[13] = pos[1];
                    mat[14] = pos[2];
                    
                    mat = self.transformAPI.scaleMatrix(scale,mat);
                    self.transform = mat;
                    
                
                },
                getScale:function()
                {
                    var mat = self.transform.internal_val;
                    var x = Vec3.magnitude([mat[0],mat[1],mat[2]]);
                    var y = Vec3.magnitude([mat[4],mat[5],mat[6]]);
                    var z = Vec3.magnitude([mat[8],mat[9],mat[10]]);
                    return [x,y,z];
                
                },
                setScale:function(x,y,z)
                {
                    if(x.length)
                    {
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    
                    var mat = self.transform.internal_val;
                    var xVec = Vec3.normalize([mat[0],mat[1],mat[2]],[]);
                    var yVec = Vec3.normalize([mat[4],mat[5],mat[6]],[]);
                    var zVec = Vec3.normalize([mat[8],mat[9],mat[10]],[]);
                    xVec = Vec3.scale(xVec,x,[]);
                    yVec = Vec3.scale(yVec,y,[]);
                    zVec = Vec3.scale(zVec,z,[]);
                    
                    mat[0] = xVec[0]; mat[1] = xVec[1]; mat[2] = xVec[2];
                    mat[4] = yVec[0]; mat[5] = yVec[1]; mat[6] = yVec[2];
                    mat[8] = zVec[0]; mat[9] = zVec[1]; mat[10] = zVec[2];
                    
                    self.transform = mat;
                
                },
                scaleMatrix:function(x,y,z,mat)
                {
                    if(x.length)
                    {
                        mat = y;
                        y = x[1];
                        z = x[2];
                        x = x[0];
                    }
                    
                   
                    var xVec = Vec3.normalize([mat[0],mat[1],mat[2]],[]);
                    var yVec = Vec3.normalize([mat[4],mat[5],mat[6]],[]);
                    var zVec = Vec3.normalize([mat[8],mat[9],mat[10]],[]);
                    xVec = Vec3.scale(xVec,x,[]);
                    yVec = Vec3.scale(yVec,y,[]);
                    zVec = Vec3.scale(zVec,z,[]);
                    
                    mat[0] = xVec[0]; mat[1] = xVec[1]; mat[2] = xVec[2];
                    mat[4] = yVec[0]; mat[5] = yVec[1]; mat[6] = yVec[2];
                    mat[8] = zVec[0]; mat[9] = zVec[1]; mat[10] = zVec[2];
                    
                    return mat;
                
                },
                lookat: function(t,clamp, axis, up,fromOffset)
                {
                    
                    var target;
                    target = t.internal_val||t;
                    if(!fromOffset) fromOffset = [0,0,0];
                    if(!axis) axis = 'Y';
                    if(up == 'X') up = [1,0,0];
                    if(up == 'Y') up = [0,1,0];
                    if(up == 'Z') up = [0,0,1];
                    if(!up) up = [0,0,1];
                    
                    var scale = self.transformAPI.getScale();
                    
                    var pos = Vec3.add(self.transformAPI.getPosition(),fromOffset,[]);
                    var tovec = Vec3.subtract(pos,target,[]);
                    if(clamp =='X')
                        tovec[0] = 0;
                    if(clamp =='Y')
                        tovec[1] = 0;
                    if(clamp =='Z')
                        tovec[2] = 0;    
                    tovec = Vec3.normalize(tovec,[]);
                    var side = Vec3.cross(tovec,up,[]);
                    side = Vec3.normalize(side,[]);
                    up = Vec3.cross(side,tovec,[]);
                    var t = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
                    if(axis == 'Y')
                    {
                        t[0] = side[0]; t[1] = side[1]; t[2] = side[2]; t[3] = 0;
                        t[4] = tovec[0]; t[5] = tovec[1]; t[6] = tovec[2]; t[7] = 0;
                        t[8] = up[0]; t[9] = up[1]; t[10] = up[2]; t[11] = 0;
                        t[12] = pos[0]; t[13] = pos[1]; t[14] = pos[2]; t[15] =1;
                        t = self.transformAPI.scaleMatrix(scale,t);
                        self.transform = t;
                    }
                    if(axis == '-Y')
                    {
                        t[0] = -side[0]; t[1] = -side[1]; t[2] = -side[2]; t[3] = 0;
                        t[4] = -tovec[0]; t[5] = -tovec[1]; t[6] = -tovec[2]; t[7] = 0;
                        t[8] = up[0]; t[9] = up[1]; t[10] = up[2]; t[11] = 0;
                        t[12] = pos[0]; t[13] = pos[1]; t[14] = pos[2]; t[15] =1;
                        t = self.transformAPI.scaleMatrix(scale,t);
                        self.transform = t;
                    }
                    if(axis == 'X')
                    {
                        t[0] = -tovec[0]; t[1] = -tovec[1]; t[2] = -tovec[2]; t[3] = 0;
                        t[4] = side[0]; t[5] = side[1]; t[6] = side[2]; t[7] = 0;
                        t[8] = up[0]; t[9] = up[1]; t[10] = up[2]; t[11] = 0;
                        t[12] = pos[0]; t[13] = pos[1]; t[14] = pos[2]; t[15] =1;
                        t = self.transformAPI.scaleMatrix(scale,t);
                        self.transform = t;
                    }
                    if(axis == 'Z')
                    {
                        t[0] = up[0]; t[1] = up[1]; t[2] = up[2]; t[3] = 0;
                        t[4] = side[0]; t[5] = side[1]; t[6] = side[2]; t[7] = 0;
                        t[8] = tovec[0]; t[9] = tovec[1]; t[10] = tovec[2]; t[11] = 0;
                        t[12] = pos[0]; t[13] = pos[1]; t[14] = pos[2]; t[15] =1;
                        t = self.transformAPI.scaleMatrix(scale,t);
                        self.transform = t;
                    }
                   
                    
                
                }
            }
            
        }
        
        return this._tapi
  worldTransform:
    set: |
      var parentInverse = goog.vec.Mat4.invert( this.transformFromValue( parent.transform.internal_val ), goog.vec.Vec3.create() );
      var transform = goog.vec.Mat4.multMat( parentInverse, this.transformFromValue( value ), goog.vec.Vec3.create() );
      this.transform = transform;
  transform:
  translation:
  rotation:
  rotationMatrix:
  quaternion: 
  scale:
  enabled: true
  boundingbox: 
    set: |
      this.logger.info("WARNING: node3 boundingbox cannot be set" )
  centerOffset: 
    set: |
      this.logger.info( "WARNING: node3 centerOffset cannot be set" )
  vertices: 
    set: |
      this.logger.info( "WARNING: node3 vertices cannot be set" )
    value: 
  vertexIndices: 
    set: |
      this.logger.info( "WARNING: node3 vertexIndices cannot be set" )
    value: 
  speed: 1
  playing: false
  looping: false
  lookAt: ""
  visible: true
methods:
  playSound:
  pauseSound:
  stopSound:
  deleteSound:
  # Translate by translation over duration.
  translateBy:
    parameters:
      - translation
      - duration
    body: |
      var startTranslation = this.translation.internal_val || goog.vec.Vec3.create();
      var deltaTranslation = this.translationFromValue( translation );
      var stopTranslation = goog.vec.Vec3.add(
        startTranslation,
        deltaTranslation,
        goog.vec.Vec3.create()
      );
      this.translationWorker(
        startTranslation,
        stopTranslation,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.translateBy.vwf
  # Translate to translation over duration.
  translateTo:
    parameters:
      - translation
      - duration
    body: |
      var startTranslation = this.translation.internal_val || goog.vec.Vec3.create();
      var stopTranslation = this.translationFromValue( translation );
      this.translationWorker(
        startTranslation,
        stopTranslation,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.translateTo.vwf
  # Perform a translation animation.
  translationWorker:
    parameters:
      - startTranslation
      - stopTranslation
      - startTime
      - stopTime
    body: |
      this.translation = goog.vec.Vec3.lerp(
        startTranslation, stopTranslation,
        startTime >= stopTime ? 1 : ( Math.max( startTime, Math.min( this.time, stopTime ) ) - startTime ) / ( stopTime - startTime ),
        goog.vec.Vec3.create()
      );
      if ( this.time < stopTime ) {
        this.in( 0.04 ).translationWorker(
          startTranslation,
          stopTranslation,
          startTime,
          stopTime
        ); // TODO: way to do this.in( next-tick )...
      }  //@ sourceURL=node3.translationWorker.vwf
  # Rotate by rotation over duration.
  rotateBy:
    parameters:
      - rotation
      - duration
    body: |
      var rotation = this.rotationFromValue( rotation );
      var deltaQuaternion = goog.vec.Quaternion.fromAngleAxis(
        rotation[3] * Math.PI / 180,
        goog.vec.Vec3.createFromValues( rotation[0], rotation[1], rotation[2] ),
        goog.vec.Quaternion.create()
      );
      this.quaterniateBy( deltaQuaternion, duration ); //@ sourceURL=node3.rotateBy.vwf
  # Rotate to rotation over duration.
  rotateTo:
    parameters:
      - rotation
      - duration
    body: |
      var rotation = this.rotationFromValue( rotation );
      var stopQuaternion = goog.vec.Quaternion.fromAngleAxis(
        rotation[3] * Math.PI / 180,
        goog.vec.Vec3.createFromValues( rotation[0], rotation[1], rotation[2] ),
        goog.vec.Quaternion.create()
      );
      this.quaterniateTo( stopQuaternion, duration ); //@ sourceURL=node3.rotateTo.vwf
  # Rotate by quaternion over duration.
  quaterniateBy:
    parameters:
      - quaternion
      - duration
    body: |
      var startQuaternion = this.quaternion.internal_val || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
      var deltaQuaternion = this.quaternionFromValue( quaternion );
      var stopQuaternion = goog.vec.Quaternion.concat(
        deltaQuaternion,
        startQuaternion,
        goog.vec.Quaternion.create()
      );
      this.quaternionWorker(
        startQuaternion,
        stopQuaternion,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.quaterniateBy.vwf
  # Rotate to quaternion over duration.
  quaterniateTo:
    parameters:
      - quaternion
      - duration
    body: |
      var startQuaternion = this.quaternion.internal_val || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
      var stopQuaternion = this.quaternionFromValue( quaternion );
      this.quaternionWorker(
        startQuaternion,
        stopQuaternion,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.quaterniateTo.vwf
  # Perform a quaternion animation.
  quaternionWorker:
    parameters:
      - startQuaternion
      - stopQuaternion
      - startTime
      - stopTime
    body: |
      this.quaternion = goog.vec.Quaternion.slerp(
        startQuaternion, stopQuaternion,
        startTime >= stopTime ? 1 : ( Math.max( startTime, Math.min( this.time, stopTime ) ) - startTime ) / ( stopTime - startTime ),
        goog.vec.Quaternion.create()
      );
      if ( this.time < stopTime ) {
        this.in( 0.04 ).quaternionWorker(
          startQuaternion,
          stopQuaternion,
          startTime,
          stopTime
        ); // TODO: way to do this.in( next-tick )...
      } //@ sourceURL=node3.quaternionWorker.vwf
  # Scale by scale over duration.
  scaleBy:
    parameters:
      - scale
      - duration
    body: |
      var startScale = this.scale.internal_val || goog.vec.Vec3.createFromValues( 1, 1, 1 );
      var deltaScale = this.scaleFromValue( scale );
      var stopScale = goog.vec.Vec3.createFromValues(
        startScale[0] * deltaScale[0],
        startScale[1] * deltaScale[1],
        startScale[2] * deltaScale[2]
      );
      this.scaleWorker(
        startScale,
        stopScale,
        this.time,
        this.time + ( duration || 0 )
      );
  # Scale to scale over duration.
  scaleTo:
    parameters:
      - scale
      - duration
    body: |
      var startScale = this.scale.internal_val || goog.vec.Vec3.createFromValues( 1, 1, 1 );
      var stopScale = this.scaleFromValue( scale );
      this.scaleWorker(
        startScale,
        stopScale,
        this.time,
        this.time + ( duration || 0 )
      );
  # Perform a scale animation.
  scaleWorker:
    parameters:
      - startScale
      - stopScale
      - startTime
      - stopTime
    body: |
      this.scale = goog.vec.Vec3.lerp(  // TODO: should be geometric interpolation
        startScale, stopScale,
        startTime >= stopTime ? 1 : ( Math.max( startTime, Math.min( this.time, stopTime ) ) - startTime ) / ( stopTime - startTime ),
        goog.vec.Vec3.create()
      );
      if ( this.time < stopTime ) {
        this.in( 0.04 ).scaleWorker(
          startScale,
          stopScale,
          startTime,
          stopTime
        );  // TODO: way to do this.in( next-tick )...
      }
events:
  keyDown:
  keyPress:
  keyUp:
  pointerClick:
  pointerDown:
  pointerMove:
  pointerUp:
  pointerEnter:
  pointerOver:
  pointerLeave:
  pointerWheel:
  transformChanged:
scripts:
- |
  // Parse a parameter as a transform specification.
  this.transformFromValue = function( value ) {
    return value && value.length >= 16 ?
      value :
      goog.vec.Mat4.createIdentity();
  };
  // Parse a parameter as a translation specification.
  this.translationFromValue = function( value ) {
    return value && value.length >= 3 ?
      value :
      goog.vec.Vec3.create();
  };
  // Parse a parameter as a rotation specification.
  this.rotationFromValue = function( value ) {
    return value && value.length >= 4 ?
      value :
      goog.vec.Vec4.createFromValues( 1, 0, 0, 0 );
  };
  // Parse a parameter as a quaternion specification.
  this.quaternionFromValue = function( value ) {
    return value && value.length >= 4 ?
      value :
      goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
  };
  // Parse a parameter as a scale specification.
  this.scaleFromValue = function( value ) {
    return Object.prototype.toString.call( value ).search( /\[object .*Array\]/ ) == 0 ?
      value.length >= 3 ?
        value :
        goog.vec.Vec3.createFromValues( 1, 1, 1 ) :
      Object.prototype.toString.call( value ) == "[object Number]" ?
        goog.vec.Vec3.createFromValues( value, value, value ) :
        goog.vec.Vec3.createFromValues( 1, 1, 1 );
  };
  // Get the scale vector for a transform and rescale to unity scale.
  this.unscaledTransform = function( transform, scale, resultTransform ) {
    var column = goog.vec.Vec4.create();
    goog.vec.Mat4.getColumn( transform, 0, column );
    goog.vec.Mat4.setColumn( resultTransform, 0, goog.vec.Vec4.scale( column, 1 / ( scale[0] = goog.vec.Vec4.magnitude( column ) ), column ) );
    goog.vec.Mat4.getColumn( transform, 1, column );
    goog.vec.Mat4.setColumn( resultTransform, 1, goog.vec.Vec4.scale( column, 1 / ( scale[1] = goog.vec.Vec4.magnitude( column ) ), column ) );
    goog.vec.Mat4.getColumn( transform, 2, column );
    goog.vec.Mat4.setColumn( resultTransform, 2, goog.vec.Vec4.scale( column, 1 / ( scale[2] = goog.vec.Vec4.magnitude( column ) ), column ) );
    return resultTransform;
  };
  // Set the scale vector for a transform with unity scale.
  this.scaledTransform = function( transform, scale, resultTransform ) {
    var column = goog.vec.Vec4.create();
    goog.vec.Mat4.getColumn( transform, 0, column );
    goog.vec.Mat4.setColumn( resultTransform, 0, goog.vec.Vec4.scale( column, scale[0], column ) );
    goog.vec.Mat4.getColumn( transform, 1, column );
    goog.vec.Mat4.setColumn( resultTransform, 1, goog.vec.Vec4.scale( column, scale[1], column ) );
    goog.vec.Mat4.getColumn( transform, 2, column );
    goog.vec.Mat4.setColumn( resultTransform, 2, goog.vec.Vec4.scale( column, scale[2], column ) );
    return resultTransform;
  };
  // Get the scale vector for a transform.
  this.transformScale = function( transform, scale ) {
    var column = goog.vec.Vec4.create();
    goog.vec.Mat4.getColumn( transform, 0, column );
    scale[0] = goog.vec.Vec4.magnitude( column );
    goog.vec.Mat4.getColumn( transform, 1, column );
    scale[1] = goog.vec.Vec4.magnitude( column );
    goog.vec.Mat4.getColumn( transform, 2, column );
    scale[2] = goog.vec.Vec4.magnitude( column );
    return scale;
  };
  this.state = function( test ) {
    vwf.logger.info( test, "x", Array.prototype.slice.apply( this.transform.internal_val || goog.vec.Mat4.createIdentity() ) );
    vwf.logger.info( test, "t", Array.prototype.slice.apply( this.translation.internal_val || goog.vec.Vec3.create() ) );
    vwf.logger.info( test, "o", Array.prototype.slice.apply( this.rotation.internal_val || goog.vec.Vec4.createFromValues( 1, 0, 0, 0 ) ) );
    vwf.logger.info( test, "s", Array.prototype.slice.apply( this.scale.internal_val || goog.vec.Vec3.createFromValues( 1, 1, 1 ) ) );
    vwf.logger.info( test, "q", Array.prototype.slice.apply( this.quaternion.internal_val || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 ) ) );
  };
  this.test1 = function() {
    this.transform = [];
    this.translation = [ 50, 0, 0 ];
    this.scale = 2;
    this.state( "test1" );
  };
  this.test2 = function() {
    this.scale = 2;
    this.state( "test2 scale 2" );
    this.scale = 1;
    this.state( "test2 scale 1" );
    this.rotation = [ 0, 0, 1, 30 ];
    this.state( "test2 rotation 30" );
    this.scale = 3;
    this.state( "test2 scale 3" );
    this.rotation = [ 0, 0, 1, -30 ];
    this.state( "test2 rotation -30" );
    this.scale = 1;
    this.state( "test2 scale 1" );
  }; //@ sourceURL=node3.vwf
